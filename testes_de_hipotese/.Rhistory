library(tidyverse)
#mpg
?mpg
library(tidyverse)
#mpg
#?mpg
#View(mpg)
mpg %>%
ggplot(aes(cty)) +
geom_density(bins = 30) +
facet_grid(fuel_type ~ drive)
library(tidyverse)
#mpg
?mpg
#View(mpg)
mpg %>%
ggplot(aes(cty)) +
geom_density(bins = 30) +
facet_grid(fl ~ drv)
library(tidyverse)
?mpg
modelo <- lm(
cty ~ displ,
mpg2
)
modelo <- lm(
cty ~ displ,
mpg
)
modelo <- lm(
cty ~ displ,
mpg
)
mpg %>%
ggplot(aes(displ)) +
geom_point(aes(y = cty))+
geom_point(aes(y = pred), color = "red")
mpg %>%
ggplot(aes(displ)) +
geom_point(aes(y = cty))+
geom_point(aes(y = pred), color = "red")
mpg
mpg <- mpg %>%
add_predictions(modelo)
library(modelr)
mpg <- mpg %>%
add_predictions(modelo)
mpg %>%
ggplot(aes(displ)) +
geom_point(aes(y = cty)) +
geom_point(aes(y = pred), color = "red")
mpg %>%
ggplot(aes(displ)) +
geom_point(aes(y = cty), color = "blue") +
geom_point(aes(y = pred), color = "red")
# Carregar a Base de Dados
dados <- read.csv("./seed/Dados.csv", header = T, sep = ";", dec = ",")
# Carregar a Base de Dados
dados <- read.csv("../seed/Dados.csv", header = T, sep = ";", dec = ",")
# Carregar a Base de Dados
dados <- read.csv("/seed/Dados.csv", header = T, sep = ";", dec = ",")
# Carregar a Base de Dados
dados <- read.csv("./seed/Dados.csv", header = T, sep = ";", dec = ",")
getwd();
setwd("~/GitHub/tecnicas_estatisticas_predicao/trabalho_final")
# Mudar o diretório do trabalho
setwd("C:/Users/feeli/Documents/GitHub/tecnicas_estatisticas_predicao/trabalho_final")
getwd();
#----------------------------------------------
# Trabalho Final
# Aluno: Felipe Eduardo Gomes
# Data Science - Turma 2
#----------------------------------------------
# Mudar o diretório do trabalho
setwd("C:/Users/feeli/Documents/GitHub/tecnicas_estatisticas_predicao/trabalho_final")
# Carregar a Base de Dados
dados <- read.csv("./seed/Dados.csv", header = T, sep = ";", dec = ",")
attach(dados)
View(dados)
View(dados)
summary(dados$salario)
summary(dados$salario)
summary(dados$instrucao)
summary(dados$experiencia)
summary(dados$idade)
cat("\014")
# Carregar a Base de Dados
dados <- read.csv("./seed/Dados.csv", header = T, sep = ";", dec = ",")
#----------------------------------------------
# Trabalho Final
# Aluno: Felipe Eduardo Gomes
# Data Science - Turma 2
#----------------------------------------------
cat("\014")
# Mudar o diretório do trabalho
setwd("C:/Users/feeli/Documents/GitHub/tecnicas_estatisticas_predicao/trabalho_final")
# Carregar a Base de Dados
dados <- read.csv("./seed/Dados.csv", header = T, sep = ";", dec = ",")
attach(dados)
# 1) Calcule as medidas de posição (Média, Mediana, Máximo, Mínimo, 1º Quartil e 3º quartil)
# para as variáveis “salario”, “instrucao", “experiência" e “idade”. Apresente os cálculos e faça uma
# interpretação dos resultados.
summary(dados$salario)
summary(dados$instrucao)
summary(dados$experiencia)
summary(dados$idade)
# 2) Calcule as medidas de dispersão (Amplitude, Desvio-Padrão, Variância, Coeficiente de
# Variação, Assimetria e Curtose) para as variáveis “salario”, “instrucao", “experiência" e “idade”. Responda o
# que segue:
# a. Com relação ao Coeficiente de Variação, qual é a variável que possui maior discrepância em seus
# valores? E a com menor discrepância?
# b. Qual deve ser a interpretação dada ao Coeficiente de Variação?
# c. Considerando que as medidas de Assimetria e Curtose qualificam a média como boa medida de
#tendência central, existe alguma das variáveis que possua problemas de assimetria e/ou curtose? Justifique.
# 3) Considere uma análise que possa ser realizada sobre a variável salario. Faça os
# procedimentos destacados a seguir:
# a. Calcule a média e a mediana do “salario” para mulheres e homens separadamente. Qual é a
# tendência apresentada para média e para mediana?
# b. Calcule a média do “salario” para brancos e não brancos. Qual é a tendência apresentada para média
# e para mediana?
# 4) Faça um gráfico Box-Plot para as variáveis salario, instrucao, experiencia e idade e
# identifique se existem outliers. Quantas observações deveriam ser excluídas em cada variável por serem
# prováveis outliers?
# 5) Considerando os gráficos de dispersão, construa-os conforme pedido a seguir:
# a. Faça um gráfico que relacione o “salario” com o tempo de “instrucao”. Analise uma eventual
# tendência dos dados.
# b. Faça um gráfico que relacione o “salario” com o tempo de “experiência". Analise uma eventual
# tendência dos dados.
# c. Faça um gráfico que relacione o “salario” com a “idade”. Analise uma eventual tendência dos dados.
# d. Faça um gráfico que relacione a “experiencia" com o tempo de “instrucao". Analise uma eventual
# tendência dos dados.
# 6) Considerando as variáveis estritamente quantitativas. Construa um Histograma e
# identifique a variável com melhor ajuste percebido para a distribuição normal de probabilidade.
# 7) Considere que a variável “salario” segue uma distribuição normal de probabilidade. A
# média e o desvio-padrão já foram calculados. Assim determine o que se pede:
# a. Qual a probabilidade estimada de uma pessoa ganhar mais do que o 3º quartil?
# b. Qual a probabilidade estimada de uma pessoa ganhar menos do que o 1º quartil?
# c. O que é mais provável, considerando a probabilidade estimada, a pessoa ganhar menos do que a
# média ou a pessoa ganhar menos do que a mediana?
#----------------------------------------------
# Trabalho Final
# Aluno: Felipe Eduardo Gomes
# Data Science - Turma 2
#----------------------------------------------
# Limpar a sujeira do console
cat("\014")
# Mudar o diretório do trabalho
setwd("C:/Users/feeli/Documents/GitHub/tecnicas_estatisticas_predicao/trabalho_final")
# Carregar a Base de Dados
dados <- read.csv("./seed/Dados.csv", header = T, sep = ";", dec = ",")
attach(dados)
# 1) Calcule as medidas de posição (Média, Mediana, Máximo, Mínimo, 1º Quartil e 3º quartil)
# para as variáveis “salario”, “instrucao", “experiência" e “idade”. Apresente os cálculos e faça uma
# interpretação dos resultados.
summary(dados$salario)
summary(dados$instrucao)
summary(dados$experiencia)
summary(dados$idade)
# 2) Calcule as medidas de dispersão (Amplitude, Desvio-Padrão, Variância, Coeficiente de
# Variação, Assimetria e Curtose) para as variáveis “salario”, “instrucao", “experiência" e “idade”. Responda o
# que segue:
# a. Com relação ao Coeficiente de Variação, qual é a variável que possui maior discrepância em seus
# valores? E a com menor discrepância?
# b. Qual deve ser a interpretação dada ao Coeficiente de Variação?
# c. Considerando que as medidas de Assimetria e Curtose qualificam a média como boa medida de
#tendência central, existe alguma das variáveis que possua problemas de assimetria e/ou curtose? Justifique.
# 3) Considere uma análise que possa ser realizada sobre a variável salario. Faça os
# procedimentos destacados a seguir:
# a. Calcule a média e a mediana do “salario” para mulheres e homens separadamente. Qual é a
# tendência apresentada para média e para mediana?
# b. Calcule a média do “salario” para brancos e não brancos. Qual é a tendência apresentada para média
# e para mediana?
# 4) Faça um gráfico Box-Plot para as variáveis salario, instrucao, experiencia e idade e
# identifique se existem outliers. Quantas observações deveriam ser excluídas em cada variável por serem
# prováveis outliers?
# 5) Considerando os gráficos de dispersão, construa-os conforme pedido a seguir:
# a. Faça um gráfico que relacione o “salario” com o tempo de “instrucao”. Analise uma eventual
# tendência dos dados.
# b. Faça um gráfico que relacione o “salario” com o tempo de “experiência". Analise uma eventual
# tendência dos dados.
# c. Faça um gráfico que relacione o “salario” com a “idade”. Analise uma eventual tendência dos dados.
# d. Faça um gráfico que relacione a “experiencia" com o tempo de “instrucao". Analise uma eventual
# tendência dos dados.
# 6) Considerando as variáveis estritamente quantitativas. Construa um Histograma e
# identifique a variável com melhor ajuste percebido para a distribuição normal de probabilidade.
# 7) Considere que a variável “salario” segue uma distribuição normal de probabilidade. A
# média e o desvio-padrão já foram calculados. Assim determine o que se pede:
# a. Qual a probabilidade estimada de uma pessoa ganhar mais do que o 3º quartil?
# b. Qual a probabilidade estimada de uma pessoa ganhar menos do que o 1º quartil?
# c. O que é mais provável, considerando a probabilidade estimada, a pessoa ganhar menos do que a
# média ou a pessoa ganhar menos do que a mediana?
# -------------------------------
# Testes de Normalidade
# -------------------------------
# Limpar console
cat("\014")
# Gerar Números Aleatórios
# Funções estatísticas para dados normais
#   dnorm -> Densidade da distribuição normal (P[X=x])
#   pnorm -> Função distribuição de probabilidade (P[X<x])
#   qnorm -> Inserir uma probabilidade (0,1) retoma o valor que a geraria
#   rnorm -> Retoma um vetor de dados normais
N10 <- rnorm(10, mean=30, sd=5)
N50 <- rnorm(50, mean=30, sd=5)
N100 <- rnorm(100, mean=30, sd=5)
N500 <- rnorm(500, mean=30, sd=5)
hist(N10)
# -------------------------------
# Testes de Normalidade
# -------------------------------
# Limpar console
cat("\014")
# Gerar Números Aleatórios
# Funções estatísticas para dados normais
#   dnorm -> Densidade da distribuição normal (P[X=x])
#   pnorm -> Função distribuição de probabilidade (P[X<x])
#   qnorm -> Inserir uma probabilidade (0,1) retoma o valor que a geraria
#   rnorm -> Retoma um vetor de dados normais
N10 <- rnorm(10, mean=30, sd=5)
N50 <- rnorm(50, mean=30, sd=5)
N100 <- rnorm(100, mean=30, sd=5)
N500 <- rnorm(500, mean=30, sd=5)
hist(N10)
hist(N50)
hist(N100)
hist(N500)
summary(N10
# -------------------------------
# Testes de Normalidade
# -------------------------------
# Limpar console
cat("\014")
# Gerar Números Aleatórios
# Funções estatísticas para dados normais
#   dnorm -> Densidade da distribuição normal (P[X=x])
#   pnorm -> Função distribuição de probabilidade (P[X<x])
#   qnorm -> Inserir uma probabilidade (0,1) retoma o valor que a geraria
#   rnorm -> Retoma um vetor de dados normais
N10 <- rnorm(10, mean=30, sd=5)
N50 <- rnorm(50, mean=30, sd=5)
N100 <- rnorm(100, mean=30, sd=5)
N500 <- rnorm(500, mean=30, sd=5)
# Gerar histograma
hist(N10)
hist(N50)
hist(N100)
hist(N500)
# Estatísticas descritivas
summary(N10)
summary(N10)
# -------------------------------
# Testes de Normalidade
# -------------------------------
# Limpar console
cat("\014")
# Gerar Números Aleatórios
# Funções estatísticas para dados normais
#   dnorm -> Densidade da distribuição normal (P[X=x])
#   pnorm -> Função distribuição de probabilidade (P[X<x])
#   qnorm -> Inserir uma probabilidade (0,1) retoma o valor que a geraria
#   rnorm -> Retoma um vetor de dados normais
N10 <- rnorm(10, mean=30, sd=5)
N50 <- rnorm(50, mean=30, sd=5)
N100 <- rnorm(100, mean=30, sd=5)
N500 <- rnorm(500, mean=30, sd=5)
# Gerar histograma
hist(N10)
hist(N50)
hist(N100)
hist(N500)
# Estatísticas descritivas
summary(N10)
summary(N50)
summary(N100)
summary(N500)
library(fBasics)
basicStats(N10
basicStats(N10)
basicStats(N10)
basicStats(N50)
install.packages("normtest")
setwd("~/GitHub/inferencia_estatistica")
install.packages("normtest")
library(normtest)
# -------------------------------
# Testes de Normalidade
# -------------------------------
# Limpar console
cat("\014")
# Gerar Números Aleatórios
# Funções estatísticas para dados normais
#   dnorm -> Densidade da distribuição normal (P[X=x])
#   pnorm -> Função distribuição de probabilidade (P[X<x])
#   qnorm -> Inserir uma probabilidade (0,1) retoma o valor que a geraria
#   rnorm -> Retoma um vetor de dados normais
N10 <- rnorm(10, mean=30, sd=5)
N50 <- rnorm(50, mean=30, sd=5)
N100 <- rnorm(100, mean=30, sd=5)
N500 <- rnorm(500, mean=30, sd=5)
N50000 <- rnorm(50000, mean=30, sd=5)
# Gerar histograma
hist(N10)
hist(N50)
hist(N100)
hist(N500)
hist(N50000)
# Estatísticas descritivas
summary(N10)
summary(N50)
summary(N100)
summary(N500)
summary(N50000)
# Biblioteca fBasics
library(fBasics)
basicStats(N10)
basicStats(N50)
basicStats(N100)
basicStats(N500)
# Teste de normalidade
# Usar o pacote normtest
install.packages("normtest")
library(normtest)
# Função do teste K-s ks.test(varX, "pnorm")
# Função do teste de Shapiro-Wilk - shapiro.test(VarX)
# Função do teste de Jarque Bera - jb.norm.test(VarX)
ks.test(N10, "pnorm")
ks.test(N50, "pnorm")
ks.test(N100, "pnorm")
ks.test(N500, "pnorm")
ks.test(N50000, "pnorm")
shapiro.test(N10)
shapiro.test(N50)
shapiro.test(N100)
shapiro.test(N500)
# shapiro.test(N50000) -- Teste shapiro não permite mais que 5000 casos
jb.norm.test(N10, "pnorm")
jb.norm.test(N50, "pnorm")
jb.norm.test(N100, "pnorm")
jb.norm.test(N500, "pnorm")
jb.norm.test(N50000, "pnorm")
install.packages("normtest")
# -------------------------------
# Testes de Normalidade
# -------------------------------
# Limpar console
cat("\014")
# Gerar Números Aleatórios
# Funções estatísticas para dados normais
#   dnorm -> Densidade da distribuição normal (P[X=x])
#   pnorm -> Função distribuição de probabilidade (P[X<x])
#   qnorm -> Inserir uma probabilidade (0,1) retoma o valor que a geraria
#   rnorm -> Retoma um vetor de dados normais
N10 <- rnorm(10, mean=30, sd=5)
N50 <- rnorm(50, mean=30, sd=5)
N100 <- rnorm(100, mean=30, sd=5)
N500 <- rnorm(500, mean=30, sd=5)
N50000 <- rnorm(50000, mean=30, sd=5)
# Gerar histograma
hist(N10)
hist(N50)
hist(N100)
hist(N500)
hist(N50000)
# Estatísticas descritivas
summary(N10)
summary(N50)
summary(N100)
summary(N500)
summary(N50000)
# Biblioteca fBasics
library(fBasics)
basicStats(N10)
basicStats(N50)
basicStats(N100)
basicStats(N500)
# Teste de normalidade
# Usar o pacote normtest
# install.packages("normtest")
library(normtest)
# Função do teste K-s ks.test(varX, "pnorm")
# Função do teste de Shapiro-Wilk - shapiro.test(VarX)
# Função do teste de Jarque Bera - jb.norm.test(VarX)
ks.test(N10, "pnorm")
ks.test(N50, "pnorm")
ks.test(N100, "pnorm")
ks.test(N500, "pnorm")
ks.test(N50000, "pnorm")
shapiro.test(N10)
shapiro.test(N50)
shapiro.test(N100)
shapiro.test(N500)
# shapiro.test(N50000) -- Teste shapiro não permite mais que 5000 casos
jb.norm.test(N10, "pnorm")
jb.norm.test(N50, "pnorm")
jb.norm.test(N100, "pnorm")
jb.norm.test(N500, "pnorm")
jb.norm.test(N50000, "pnorm")
# -------------------------------
# Testes de Normalidade
# -------------------------------
# Limpar console
cat("\014")
# Gerar Números Aleatórios
# Funções estatísticas para dados normais
#   dnorm -> Densidade da distribuição normal (P[X=x])
#   pnorm -> Função distribuição de probabilidade (P[X<x])
#   qnorm -> Inserir uma probabilidade (0,1) retoma o valor que a geraria
#   rnorm -> Retoma um vetor de dados normais
N10 <- rnorm(10, mean=30, sd=5)
N50 <- rnorm(50, mean=30, sd=5)
N100 <- rnorm(100, mean=30, sd=5)
N500 <- rnorm(500, mean=30, sd=5)
N50000 <- rnorm(50000, mean=30, sd=5)
# Gerar histograma
hist(N10)
hist(N50)
hist(N100)
hist(N500)
hist(N50000)
# Estatísticas descritivas
summary(N10)
summary(N50)
summary(N100)
summary(N500)
summary(N50000)
# Biblioteca fBasics
library(fBasics)
basicStats(N10)
basicStats(N50)
basicStats(N100)
basicStats(N500)
# Teste de normalidade
# Usar o pacote normtest
# install.packages("normtest")
library(normtest)
# Função do teste K-s ks.test(varX, "pnorm")
# Função do teste de Shapiro-Wilk - shapiro.test(VarX)
# Função do teste de Jarque Bera - jb.norm.test(VarX)
ks.test(N10, "pnorm")
ks.test(N50, "pnorm")
ks.test(N100, "pnorm")
ks.test(N500, "pnorm")
ks.test(N50000, "pnorm")
shapiro.test(N10)
shapiro.test(N50)
shapiro.test(N100)
shapiro.test(N500)
# shapiro.test(N50000) -- Teste shapiro não permite mais que 5000 casos
jb.norm.test(N10)
jb.norm.test(N50)
jb.norm.test(N100)
jb.norm.test(N500)
jb.norm.test(N50000)
setwd("~/GitHub/inferencia_estatistica/testes_de_hipotese")
# -------------------------------
# Testes de Normalidade
# -------------------------------
# Limpar console
cat("\014")
# Mudar o diretório do trabalho
setwd("C:/Users/feeli/Documents/GitHub/inferencia_estatistica/testes_de_hipotese")
# Gerar Números Aleatórios
# Funções estatísticas para dados normais
#   dnorm -> Densidade da distribuição normal (P[X=x])
#   pnorm -> Função distribuição de probabilidade (P[X<x])
#   qnorm -> Inserir uma probabilidade (0,1) retoma o valor que a geraria
#   rnorm -> Retoma um vetor de dados normais
N10 <- rnorm(10, mean=30, sd=5)
N50 <- rnorm(50, mean=30, sd=5)
N100 <- rnorm(100, mean=30, sd=5)
N500 <- rnorm(500, mean=30, sd=5)
N50000 <- rnorm(50000, mean=30, sd=5)
# Gerar histograma
hist(N10)
hist(N50)
hist(N100)
hist(N500)
hist(N50000)
# Estatísticas descritivas
summary(N10)
summary(N50)
summary(N100)
summary(N500)
summary(N50000)
# Biblioteca fBasics
library(fBasics)
basicStats(N10)
basicStats(N50)
basicStats(N100)
basicStats(N500)
# Teste de normalidade
# Usar o pacote normtest
# install.packages("normtest")
library(normtest)
# Função do teste K-s ks.test(varX, "pnorm")
# Função do teste de Shapiro-Wilk - shapiro.test(VarX)
# Função do teste de Jarque Bera - jb.norm.test(VarX)
ks.test(N10, "pnorm")
ks.test(N50, "pnorm")
ks.test(N100, "pnorm")
ks.test(N500, "pnorm")
ks.test(N50000, "pnorm")
shapiro.test(N10)
shapiro.test(N50)
shapiro.test(N100)
shapiro.test(N500)
# shapiro.test(N50000) -- Teste shapiro não permite mais que 5000 casos
jb.norm.test(N10)
jb.norm.test(N50)
jb.norm.test(N100)
jb.norm.test(N500)
jb.norm.test(N50000)
